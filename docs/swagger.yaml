basePath: /
definitions:
  models.APIResponse:
    properties:
      error:
        description: Error details (optional, only present if there's an error)
        type: string
      message:
        description: A descriptive message about the operation
        type: string
      success:
        description: Indicates if the operation was successful
        type: boolean
    type: object
  models.AuthProvider:
    enum:
    - local
    - google
    - github
    type: string
    x-enum-varnames:
    - LocalAuth
    - GoogleAuth
    - GitHubAuth
  models.OrganizationAddUserInput:
    properties:
      roleIds:
        items:
          type: string
        type: array
      userId:
        type: string
    required:
    - userId
    type: object
  models.OrganizationCreateInput:
    properties:
      adminIds:
        items:
          type: string
        type: array
      description:
        type: string
      domain:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.OrganizationResponse:
    properties:
      active:
        type: boolean
      adminIds:
        items:
          type: string
        type: array
      createdAt:
        type: string
      description:
        type: string
      domain:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.OrganizationUpdateInput:
    properties:
      active:
        type: boolean
      adminIds:
        items:
          type: string
        type: array
      description:
        type: string
      domain:
        type: string
      name:
        type: string
    type: object
  models.RoleAddPermissionInput:
    properties:
      permissionIds:
        items:
          type: string
        type: array
    required:
    - permissionIds
    type: object
  models.RoleCreateInput:
    properties:
      description:
        type: string
      name:
        type: string
      organizationId:
        type: string
      permissionIds:
        items:
          type: string
        type: array
    required:
    - name
    type: object
  models.RoleRemovePermissionInput:
    properties:
      permissionIds:
        items:
          type: string
        type: array
    required:
    - permissionIds
    type: object
  models.RoleResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      isSystemDefault:
        type: boolean
      name:
        type: string
      organizationId:
        type: string
      permissionIds:
        items:
          type: string
        type: array
      updatedAt:
        type: string
    type: object
  models.RoleUpdateInput:
    properties:
      description:
        type: string
      name:
        type: string
      permissionIds:
        items:
          type: string
        type: array
    type: object
  models.UserCreateInput:
    properties:
      authProvider:
        $ref: '#/definitions/models.AuthProvider'
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      organizationIds:
        items:
          type: string
        type: array
      password:
        minLength: 8
        type: string
      providerUserId:
        type: string
      roleIds:
        items:
          type: string
        type: array
      username:
        type: string
    required:
    - authProvider
    - email
    - firstName
    - lastName
    - username
    type: object
  models.UserLoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserResponse:
    properties:
      active:
        type: boolean
      authProvider:
        $ref: '#/definitions/models.AuthProvider'
      createdAt:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      firstName:
        type: string
      id:
        type: string
      lastLogin:
        type: string
      lastName:
        type: string
      organizationIds:
        items:
          type: string
        type: array
      roleIds:
        items:
          type: string
        type: array
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.UserSwaggerResponse:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.UserUpdateInput:
    properties:
      active:
        type: boolean
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      organizationIds:
        items:
          type: string
        type: array
      password:
        minLength: 8
        type: string
      roleIds:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
host: localhost:5000
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/support
  description: This is the API documentation for the RBAC system.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: RBAC System API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user account with the provided details
      parameters:
      - description: User Login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginInput'
      produces:
      - application/json
      responses:
        "201":
          description: User Logged successfully
          schema:
            $ref: '#/definitions/models.UserSwaggerResponse'
        "400":
          description: Invalid request body or missing fields
        "409":
          description: Username or email already exists
        "500":
          description: Internal server error
      summary: Login a new user
      tags:
      - auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes an access token using the provided valid token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/models.UserSwaggerResponse'
        "400":
          description: Invalid request or missing token
        "401":
          description: Unauthorized or invalid token
        "403":
          description: User account is disabled
        "500":
          description: Internal server error
      summary: Refresh access token
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.UserSwaggerResponse'
        "400":
          description: Invalid request body or missing fields
        "409":
          description: Username or email already exists
        "500":
          description: Internal server error
      summary: Register a new user
      tags:
      - auth
  /api/organizations:
    get:
      consumes:
      - application/json
      description: Fetch a list of organizations with optional filters for pagination
      parameters:
      - description: 'Number of organizations to retrieve (default: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of organizations to skip (default: 0)'
        in: query
        name: skip
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of organizations retrieved successfully
        "500":
          description: Internal server error
      summary: Retrieve all organizations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Creates a new organization with the provided details
      parameters:
      - description: Organization creation details
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/models.OrganizationCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Organization created successfully
          schema:
            $ref: '#/definitions/models.OrganizationResponse'
        "400":
          description: Invalid request body or missing fields
        "409":
          description: Organization name or domain already exists
        "500":
          description: Internal server error
      summary: Create a new organization
      tags:
      - organizations
  /api/organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an organization by its unique identifier
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization deleted successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Invalid organization ID
        "404":
          description: Organization not found
        "500":
          description: Internal server error
      summary: Delete an organization
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Fetch a single organization by its unique identifier
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization retrieved successfully
          schema:
            $ref: '#/definitions/models.OrganizationResponse'
        "400":
          description: Invalid organization ID
        "404":
          description: Organization not found
        "500":
          description: Internal server error
      summary: Retrieve an organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Updates an existing organization with the provided details
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization update details
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/models.OrganizationUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Organization updated successfully
          schema:
            $ref: '#/definitions/models.OrganizationResponse'
        "400":
          description: Invalid organization ID or request body
        "404":
          description: Organization not found
        "409":
          description: Organization name or domain already exists
        "500":
          description: Internal server error
      summary: Update an organization
      tags:
      - organizations
  /api/organizations/{id}/users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users belonging to a specific organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Number of users to retrieve (default: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of users to skip (default: 0)'
        in: query
        name: skip
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users retrieved successfully
        "400":
          description: Invalid organization ID
        "404":
          description: Organization not found
        "500":
          description: Internal server error
      summary: Get all users in an organization
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Adds a user to an organization with optional role assignments
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User and role details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.OrganizationAddUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: User added to organization successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Invalid organization ID or request body
        "404":
          description: Organization or user not found
        "500":
          description: Internal server error
      summary: Add a user to an organization
      tags:
      - organizations
  /api/organizations/{id}/users/{userId}:
    delete:
      consumes:
      - application/json
      description: Removes a user from an organization by their unique identifier
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User removed from organization successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Invalid organization ID or user ID
        "404":
          description: Organization or user not found
        "500":
          description: Internal server error
      summary: Remove a user from an organization
      tags:
      - organizations
  /api/roles:
    get:
      consumes:
      - application/json
      description: Fetch a list of roles with optional filters for pagination
      parameters:
      - description: 'Number of roles to retrieve (default: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of roles to skip (default: 0)'
        in: query
        name: skip
        type: integer
      - description: Filter roles by organization ID
        in: query
        name: organizationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of roles retrieved successfully
        "400":
          description: Invalid query parameters
        "500":
          description: Internal server error
      summary: Retrieve all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Creates a new role with the provided details
      parameters:
      - description: Role creation details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RoleCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/models.RoleResponse'
        "400":
          description: Invalid request body or missing fields
        "409":
          description: Role name already exists
        "500":
          description: Internal server error
      summary: Create a new role
      tags:
      - roles
  /api/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a role by its unique identifier
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Invalid role ID
        "404":
          description: Role not found
        "500":
          description: Internal server error
      summary: Delete a role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Fetch a single role by its unique identifier
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role retrieved successfully
          schema:
            $ref: '#/definitions/models.RoleResponse'
        "400":
          description: Invalid role ID
        "404":
          description: Role not found
        "500":
          description: Internal server error
      summary: Retrieve a role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Updates an existing role with the provided details
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RoleUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/models.RoleResponse'
        "400":
          description: Invalid role ID or request body
        "404":
          description: Role not found
        "409":
          description: Role name already exists
        "500":
          description: Internal server error
      summary: Update a role
      tags:
      - roles
  /api/roles/{id}/permissions:
    delete:
      consumes:
      - application/json
      description: Removes one or more permissions from a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission IDs to remove
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.RoleRemovePermissionInput'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions removed from role successfully
          schema:
            $ref: '#/definitions/models.RoleResponse'
        "400":
          description: Invalid role ID or request body
        "404":
          description: Role not found
        "500":
          description: Internal server error
      summary: Remove permissions from a role
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Adds one or more permissions to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission IDs to add
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.RoleAddPermissionInput'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions added to role successfully
          schema:
            $ref: '#/definitions/models.RoleResponse'
        "400":
          description: Invalid role ID or request body
        "404":
          description: Role not found
        "500":
          description: Internal server error
      summary: Add permissions to a role
      tags:
      - roles
  /api/users:
    get:
      consumes:
      - application/json
      description: Fetch a list of users with optional filters for pagination and
        organization
      parameters:
      - description: 'Number of users to retrieve (default: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of users to skip (default: 0)'
        in: query
        name: skip
        type: integer
      - description: Filter users by organization ID
        in: query
        name: organizationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users retrieved successfully
        "400":
          description: Invalid query parameters
        "500":
          description: Internal server error
      summary: Retrieve all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided details
      parameters:
      - description: User creation details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid request body or missing fields
        "409":
          description: Username or email already exists
        "500":
          description: Internal server error
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their unique identifier
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
        "400":
          description: Invalid user ID
        "404":
          description: User not found
        "500":
          description: Internal server error
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Fetch a single user by their unique identifier
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid user ID
        "404":
          description: User not found
        "500":
          description: Internal server error
      summary: Retrieve a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates an existing user with the provided details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid user ID or request body
        "404":
          description: User not found
        "409":
          description: Username or email already exists
        "500":
          description: Internal server error
      summary: Update a user
      tags:
      - users
  /api/users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the authenticated user's details
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user retrieved successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: User not authenticated
        "404":
          description: User not found
        "500":
          description: Internal server error
      summary: Get current user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates the authenticated user's details
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user updated successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid request body
        "401":
          description: User not authenticated
        "500":
          description: Internal server error
      summary: Update current user
      tags:
      - users
swagger: "2.0"
