{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for the RBAC system.",
        "title": "RBAC System API",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "basePath": "/",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "Logs in a user account with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a new user",
                "parameters": [
                    {
                        "description": "User Login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Logged successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields"
                    },
                    "409": {
                        "description": "Username or email already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "description": "Refreshes an access token using the provided valid token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing token"
                    },
                    "401": {
                        "description": "Unauthorized or invalid token"
                    },
                    "403": {
                        "description": "User account is disabled"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/auth/refresh-token": {
            "post": {
                "description": "Generates a new access token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh Access Token",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "refreshToken",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token generated successfully"
                    },
                    "400": {
                        "description": "Invalid request body or missing refresh token"
                    },
                    "401": {
                        "description": "Invalid or expired refresh token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Creates a new user account with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserSwaggerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields"
                    },
                    "409": {
                        "description": "Username or email already exists"
                    }
                }
            }
        },
        "/api/organizations": {
            "get": {
                "description": "Fetch a list of organizations with optional filters for pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Retrieve all organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of organizations to retrieve (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of organizations to skip (default: 0)",
                        "name": "skip",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of organizations retrieved successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Creates a new organization with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "description": "Organization creation details",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organization created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields"
                    },
                    "409": {
                        "description": "Organization name or domain already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/organizations/{id}": {
            "get": {
                "description": "Fetch a single organization by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Retrieve an organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID"
                    },
                    "404": {
                        "description": "Organization not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "Updates an existing organization with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization update details",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID or request body"
                    },
                    "404": {
                        "description": "Organization not found"
                    },
                    "409": {
                        "description": "Organization name or domain already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Deletes an organization by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID"
                    },
                    "404": {
                        "description": "Organization not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/organizations/{id}/users": {
            "get": {
                "description": "Retrieves a list of users belonging to a specific organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get all users in an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of users to retrieve (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of users to skip (default: 0)",
                        "name": "skip",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid organization ID"
                    },
                    "404": {
                        "description": "Organization not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Adds a user to an organization with optional role assignments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Add a user to an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User and role details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationAddUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User added to organization successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID or request body"
                    },
                    "404": {
                        "description": "Organization or user not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/organizations/{id}/users/{userId}": {
            "delete": {
                "description": "Removes a user from an organization by their unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Remove a user from an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User removed from organization successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid organization ID or user ID"
                    },
                    "404": {
                        "description": "Organization or user not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/roles": {
            "get": {
                "description": "Fetch a list of roles with optional filters for pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Retrieve all roles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of roles to retrieve (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of roles to skip (default: 0)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter roles by organization ID",
                        "name": "organizationId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of roles retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Creates a new role with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role creation details",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoleCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields"
                    },
                    "409": {
                        "description": "Role name already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/roles/{id}": {
            "get": {
                "description": "Fetch a single role by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Retrieve a role by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "Updates an existing role with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Update a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role update details",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoleUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID or request body"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "409": {
                        "description": "Role name already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Deletes a role by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/roles/{id}/permissions": {
            "post": {
                "description": "Adds one or more permissions to a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Add permissions to a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission IDs to add",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoleAddPermissionInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions added to role successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID or request body"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Removes one or more permissions from a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Remove permissions from a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission IDs to remove",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RoleRemovePermissionInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions removed from role successfully",
                        "schema": {
                            "$ref": "#/definitions/models.RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID or request body"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "Fetch a list of users with optional filters for pagination and organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of users to retrieve (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of users to skip (default: 0)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter users by organization ID",
                        "name": "organizationId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid query parameters"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Creates a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing fields"
                    },
                    "409": {
                        "description": "Username or email already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/users/me": {
            "get": {
                "description": "Retrieves the authenticated user's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authenticated user retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "Updates the authenticated user's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authenticated user updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "401": {
                        "description": "User not authenticated"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "description": "Fetch a single user by their unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "Updates an existing user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or request body"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "Username or email already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Deletes a user by their unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully"
                    },
                    "400": {
                        "description": "Invalid user ID"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error details (optional, only present if there's an error)",
                    "type": "string"
                },
                "message": {
                    "description": "A descriptive message about the operation",
                    "type": "string"
                },
                "success": {
                    "description": "Indicates if the operation was successful",
                    "type": "boolean"
                }
            }
        },
        "models.AuthProvider": {
            "type": "string",
            "enum": [
                "local",
                "google",
                "github"
            ],
            "x-enum-varnames": [
                "LocalAuth",
                "GoogleAuth",
                "GitHubAuth"
            ]
        },
        "models.OrganizationAddUserInput": {
            "type": "object",
            "required": [
                "userId"
            ],
            "properties": {
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.OrganizationCreateInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "adminIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.OrganizationResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "adminIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.OrganizationUpdateInput": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "adminIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.RoleAddPermissionInput": {
            "type": "object",
            "required": [
                "permissionIds"
            ],
            "properties": {
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.RoleCreateInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.RoleRemovePermissionInput": {
            "type": "object",
            "required": [
                "permissionIds"
            ],
            "properties": {
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.RoleResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isSystemDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.RoleUpdateInput": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UserCreateInput": {
            "type": "object",
            "required": [
                "authProvider",
                "email",
                "firstName",
                "lastName",
                "username"
            ],
            "properties": {
                "authProvider": {
                    "$ref": "#/definitions/models.AuthProvider"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "organizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "providerUserId": {
                    "type": "string"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserLoginInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "authProvider": {
                    "$ref": "#/definitions/models.AuthProvider"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastLogin": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "organizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserSwaggerResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.UserResponse"
                }
            }
        },
        "models.UserUpdateInput": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "organizationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}